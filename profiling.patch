diff --git a/pytpcc/drivers/lsddriver.py b/pytpcc/drivers/lsddriver.py
index ace5934..7c944d8 100644
--- a/pytpcc/drivers/lsddriver.py
+++ b/pytpcc/drivers/lsddriver.py
@@ -32,6 +32,7 @@ from pymemcache.client.base import Client as memcached
 import uuid
 import constants
 from abstractdriver import *
+import time
 
 ## ==============================================
 ## "Client library"
@@ -623,8 +624,11 @@ class LsdDriver(AbstractDriver):
             '''
             d_key = self.__d_key(d_id, w_id, '')
             d_next_o_id_key = self.__d_key(d_id, w_id, 'next_o_id')
+            __start__ = time.time()
             exists, value = self.client.get(d_next_o_id_key)
             d_next_o_id = int(value)
+            __end__ = time.time()
+            logging.warn('LSDDriver::doNewOrder get={} (nanoseconds)'.format((__end__ - __start__) * 1000000000))
             exists, value = self.client.get_notxn(d_key)
             assert exists
             d = tpcc_pb2.district()
@@ -763,10 +767,15 @@ class LsdDriver(AbstractDriver):
                 '''
                 restock_qty = constants.MAX_QUANTITY - 9
                 restock_threshold = 10
+                __start_istrue__ = time.time()
                 if s_quantity >= ol_quantity + restock_threshold:
+                    __start_addsub__ = time.time()
                     s_quantity -= ol_quantity
                 else:
+                    __start_addsub__ = time.time()
                     s_quantity = (s_quantity - ol_quantity) + restock_qty
+                __end__ = time.time()
+                logging.warn('LSDDriver::doNewOrder istrue={} add/sub={} (nanoseconds)'.format((__start_addsub__ - __start_istrue__) * 1000000000, (__end__ - __start_addsub__) * 1000000000))
                 self.client.put(s_quantity_key, str(s_quantity))
                 '''
                 update stock year-to-date balance (s_ytd)
diff --git a/pytpcc/runtime/executor.py b/pytpcc/runtime/executor.py
index fb44d5c..ca8386f 100644
--- a/pytpcc/runtime/executor.py
+++ b/pytpcc/runtime/executor.py
@@ -101,7 +101,7 @@ class Executor:
         ## *minimum* percentages to be maintained. This is close to the right
         ## thing, but not precisely correct. See TPC-C 5.2.4 (page 68).
         if self.next_txn is None:
-            x = rand.number(1, 100)
+            x = 99
             params = None
             txn = None
             if x <= 4: ## 4%
